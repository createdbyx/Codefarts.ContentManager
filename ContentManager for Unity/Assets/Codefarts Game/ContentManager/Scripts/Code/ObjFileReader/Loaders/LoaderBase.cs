
namespace ObjLoader.Loader.Loaders
{
    using System;
    using System.Threading;
    using System.IO;

    using UnityEngine;

    public abstract class LoaderBase
    {
        protected void StartLoad(Stream lineStream)
        {
            using (var reader = new StreamReader(lineStream))
            {
                while (!reader.EndOfStream)
                {
                    ParseLine(reader);
                }
            }
        }

        protected void StartLoadAsync(Stream lineStream, Action<float, bool> progress)
        {
            if (progress == null)
            {
                throw new ArgumentNullException("progress");
            }

            ThreadPool.QueueUserWorkItem(
                (state) =>
                {
                  //  Debug.Log("length: " + lineStream.Length);
                    using (var reader = new StreamReader((Stream)state))
                    {
                        try
                        {

                            var dataLength = 0;
                            while (!reader.EndOfStream)
                            {
                                dataLength += ParseLine(reader);
                                progress((((float)dataLength / lineStream.Length) * 100), false);
                               // Debug.Log("per%: " + (((float)dataLength / lineStream.Length) * 100));
                           //     Debug.Log("read: " + dataLength);
                            }

                            progress(99, true);
                        }
                        catch
                        {
                        }
                    }
                }, lineStream);
        }

        private bool IsNullOrWhiteSpace(string value)
        {
            if (value == null)
            {
                return true;
            }

            for (var i = 0; i < value.Length; i++)
            {
                if (!char.IsWhiteSpace(value[i]))
                {
                    return false;
                }
            }

            return true;
        }

        private int ParseLine(StreamReader reader)
        {
            var currentLine = reader.ReadLine();

            // handles obj files generated by PrimitivesPro v1.8.3 http://u3d.as/4gQ
            if (!this.IsNullOrWhiteSpace(currentLine))
            {
                var clone = new string(currentLine[0], currentLine.Length);
                if (clone == currentLine)
                {
                    return this.IsNullOrWhiteSpace(currentLine) ? 0 : currentLine.Length;
                }
            }

            if (this.IsNullOrWhiteSpace(currentLine) || currentLine[0] == '#')
            {
                return this.IsNullOrWhiteSpace(currentLine) ? 0 : currentLine.Length;
            }

            var fields = currentLine.Trim().Split(null, 2);
            var keyword = fields[0].Trim();
            var data = fields[1].Trim();

            ParseLine(keyword, data);
            return this.IsNullOrWhiteSpace(currentLine) ? 0 : currentLine.Length;
        }

        protected abstract void ParseLine(string keyword, string data);
    }
}